name: CI

on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the tests with tmate debugging enabled'
        required: false
        default: false

#  pull_request:

jobs:
  commit-lint:
    runs-on: ubuntu-latest
    steps:
      - name: find the prev warning if exist
        uses: peter-evans/find-comment@v1
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: "bad commit message"
      - name: Delete comment if exist
        if: ${{ steps.fc.outputs.comment-id != 0 }}
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.deleteComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ steps.fc.outputs.comment-id }},
            })
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - run: 'echo "module.exports = {extends: [''@commitlint/config-conventional'']}" > commitlint.config.js'
      - uses: wagoid/commitlint-github-action@v1
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      - name: if lint failed
        if: ${{ failure() }}
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Thanks for your contribution :heart:
            :broken_heart: Unfortunately, this PR has one ore more **bad commit messages**, it can not be merged. To fix this problem, please refer to:
            - [Commit Message Guideline for the First Time Contributor](https://github.com/jina-ai/jina/issues/553)
            - [Contributing Guideline](https://github.com/jina-ai/jina/blob/master/CONTRIBUTING.md)
            Note, other CI tests will *not* *start* until the commit messages get fixed.
            This message will be deleted automatically when the commit messages get fixed.
          reaction-type: "eyes"

  lint-flake-8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Lint with flake8
        run: |
          pip install flake8
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude .git,__pycache__,docs/source/conf.py,old,build,dist,tests/,jina/resources/,now/thirdparty
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude .git,__pycache__,docs/source/conf.py,old,build,dist,tests/,jina/resources/,now/thirdparty

  check-black:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - id: file_changes
        uses: Ana06/get-changed-files@v1.2
      - name: check black
        run: ./scripts/black.sh
        env:
          CHANGED_FILES: ${{ steps.file_changes.outputs.added_modified }}

  update-preprocessor-if-required:
    runs-on: ubuntu-latest
    needs: [commit-lint, lint-flake-8, check-black]
    steps:
      - uses: actions/checkout@v2
      - name: Check if preprocessing has changed
        uses: dorny/paths-filter@v2
        id: check_has_preprocessing_changed
        with:
          filters: |
            has_preprocessing_changed:
            - 'now/app/**'
            - 'now/common/preprocess.py'
            - 'now/executor/preprocessor/**'
            - 'now/executor/abstract/auth/**'
      - name: Get preprocessor tag
        if: steps.check_has_preprocessing_changed.outputs.has_preprocessing_changed == 'true'
        run: |
          FILE='now/constants.py'
          NOW_PREPROCESSOR_VERSION=$(sed -n '/NOW_PREPROCESSOR_VERSION =/p' $FILE | cut -d \' -f2)
          echo "NOW_PREPROCESSOR_VERSION=$NOW_PREPROCESSOR_VERSION" >> $GITHUB_ENV
      - name: Set up Python 3.7
        if: steps.check_has_preprocessing_changed.outputs.has_preprocessing_changed == 'true'
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Pip install jina
        if: steps.check_has_preprocessing_changed.outputs.has_preprocessing_changed == 'true'
        run: pip install "jina[perf]"
      - name: Check that tag isn't used already for preprocessor
        if: steps.check_has_preprocessing_changed.outputs.has_preprocessing_changed == 'true'
        env:
          NOW_PREPROCESSOR_VERSION: ${{ env.NOW_PREPROCESSOR_VERSION }}
        run: |
          if jina hub pull jinahub+docker://vlxgoxlv/$NOW_PREPROCESSOR_VERSION; then
            echo "NOW preprocessor version is used already. Please update the tag"
            exit 1
          else
            echo "NOW preprocessor version isn't used already, continue to build..."
          fi
      - name: hack force push
        if: steps.check_has_preprocessing_changed.outputs.has_preprocessing_changed == 'true'
        run: echo ${{ github.event.pull_request.head.sha }} > now/executor/preprocessor/force_push.txt
      - name: Build and push executor
        if: steps.check_has_preprocessing_changed.outputs.has_preprocessing_changed == 'true'
        env:
          NOW_PREPROCESSOR_VERSION: ${{ env.NOW_PREPROCESSOR_VERSION }}
        run: JINA_AUTH_TOKEN=${{ secrets.NOW_PREPROCESSOR_JCLOUD_TOKEN }} jina hub push --no-cache --verbose --force-update NOWPreprocessor now/executor/preprocessor/. -t latest --protected-tag $NOW_PREPROCESSOR_VERSION --build-env JINA_NOW_COMMIT_SHA=${{ github.event.pull_request.head.sha }}

  update-qdrant-executor-if-required:
    runs-on: ubuntu-latest
    needs: [commit-lint, lint-flake-8, check-black]
    steps:
      - uses: actions/checkout@v2
      - name: Check if executor has changed
        uses: dorny/paths-filter@v2
        id: check_has_executor_changed
        with:
          filters: |
            has_changed:
            - 'now/executor/abstract/**'
            - 'now/executor/indexer/qdrant/**'
      - name: Get executor tag
        if: steps.check_has_executor_changed.outputs.has_changed == 'true'
        run: |
          FILE='now/constants.py'
          NOW_QDRANT_INDEXER_VERSION=$(sed -n '/NOW_QDRANT_INDEXER_VERSION =/p' $FILE | cut -d \' -f2)
          echo "NOW_QDRANT_INDEXER_VERSION=$NOW_QDRANT_INDEXER_VERSION" >> $GITHUB_ENV
      - name: Set up Python 3.7
        if: steps.check_has_executor_changed.outputs.has_changed == 'true'
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Pip install jina
        if: steps.check_has_executor_changed.outputs.has_changed == 'true'
        run: pip install "jina[perf]"
      - name: Check that tag isn't used already for executor
        if: steps.check_has_executor_changed.outputs.has_changed == 'true'
        env:
          NOW_QDRANT_INDEXER_VERSION: ${{ env.NOW_QDRANT_INDEXER_VERSION }}
        run: |
          if jina hub pull jinahub+docker://2b1opoje/$NOW_QDRANT_INDEXER_VERSION; then
            echo "NOW Qdrant Indexer version is used already. Please update the tag"
            exit 1
          else
            echo "NOW Qdrant Indexer version isn't used already, continue to build..."
          fi
      - name: hack force push
        if: steps.check_has_preprocessing_changed.outputs.has_preprocessing_changed == 'true'
        run: echo ${{ github.event.pull_request.head.sha }} > now/executor/indexer/qdrant/force_push.txt
      - name: Build and push executor
        if: steps.check_has_executor_changed.outputs.has_changed == 'true'
        env:
          NOW_QDRANT_INDEXER_VERSION: ${{ env.NOW_QDRANT_INDEXER_VERSION }}
        run: jina hub push --no-cache --verbose --force-update NOWQdrantIndexer15 now/executor/indexer/qdrant --secret ${{ secrets.NOW_QDRANT_EXECUTOR_SECRET }} -t latest --protected-tag $NOW_QDRANT_INDEXER_VERSION --build-env JINA_NOW_COMMIT_SHA=${{ github.event.pull_request.head.sha }}

  update-ocr-executor-if-required:
    runs-on: ubuntu-latest
    needs: [commit-lint, lint-flake-8, check-black]
    steps:
      - uses: actions/checkout@v2
      - name: Check if executor has changed
        uses: dorny/paths-filter@v2
        id: check_has_executor_changed
        with:
          filters: |
            has_changed:
            - 'now/executor/ocr_detector/**'
      - name: Get executor tag
        if: steps.check_has_executor_changed.outputs.has_changed == 'true'
        run: |
          FILE='now/constants.py'
          NOW_OCR_DETECTOR_VERSION=$(sed -n '/NOW_OCR_DETECTOR_VERSION =/p' $FILE | cut -d \' -f2)
          echo "NOW_OCR_DETECTOR_VERSION=$NOW_OCR_DETECTOR_VERSION" >> $GITHUB_ENV
      - name: Set up Python 3.7
        if: steps.check_has_executor_changed.outputs.has_changed == 'true'
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Pip install jina
        if: steps.check_has_executor_changed.outputs.has_changed == 'true'
        run: pip install "jina[perf]"
      - name: Check that tag isn't used already for executor
        if: steps.check_has_executor_changed.outputs.has_changed == 'true'
        env:
          NOW_OCR_DETECTOR_VERSION: ${{ env.NOW_OCR_DETECTOR_VERSION }}
        run: |
          if jina hub pull jinahub+docker://ihlff59i/$NOW_OCR_DETECTOR_VERSION; then
            echo "NOW OCR Executor version is used already. Please update the tag"
            exit 1
          else
            echo "NOW OCR Executor version isn't used already, continue to build..."
          fi
      - name: hack force push
        if: steps.check_has_preprocessing_changed.outputs.has_preprocessing_changed == 'true'
        run: echo ${{ github.event.pull_request.head.sha }} > now/executor/ocr_detector/force_push.txt
      - name: Build and push executor
        if: steps.check_has_executor_changed.outputs.has_changed == 'true'
        env:
          NOW_OCR_DETECTOR_VERSION: ${{ env.NOW_OCR_DETECTOR_VERSION }}
        run: |
          jina hub push --no-cache  --verbose --force-update NOWOCRDetector9 now/executor/ocr_detector --secret ${{ secrets.NOW_OCR_EXECUTOR_SECRET }} -t latest --protected-tag $NOW_OCR_DETECTOR_VERSION --build-env JINA_NOW_COMMIT_SHA=${{ github.event.pull_request.head.sha }}
          jina hub push --no-cache --verbose --force-update NOWOCRDetector9 now/executor/ocr_detector --secret ${{ secrets.NOW_OCR_EXECUTOR_SECRET }} -t latest-gpu --protected-tag $NOW_OCR_DETECTOR_VERSION-gpu -f now/executor/ocr_detector/Dockerfile.gpu --build-env JINA_NOW_COMMIT_SHA=${{ github.event.pull_request.head.sha }}

  update-bff-playground-if-required:
    runs-on: ubuntu-latest
    needs: [commit-lint, lint-flake-8, check-black]
    steps:
      - uses: actions/checkout@v2
      - name: Check if deployment has changed
        uses: dorny/paths-filter@v2
        id: check_has_deployment_changed
        with:
          filters: |
            has_deployment_changed:
            - 'deployment/playground/**'
            - 'deployment/bff/**'
      - name: Get bff and playground tag
        if: steps.check_has_deployment_changed.outputs.has_deployment_changed == 'true'
        run: |
          FILE='now/constants.py'
          BFF_PLAYGROUND_TAG=$(sed -n '/DOCKER_BFF_PLAYGROUND_TAG =/p' $FILE | cut -d \' -f2)
          echo "BFF_PLAYGROUND_TAG=$BFF_PLAYGROUND_TAG" >> $GITHUB_ENV
      - name: Check that tag isn't used already for bff
        if: steps.check_has_deployment_changed.outputs.has_deployment_changed == 'true'
        env:
          IMAGE_TAG: ${{ env.BFF_PLAYGROUND_TAG }}
        run: |
          if docker manifest inspect jinaai/now-bff:$IMAGE_TAG; then
            echo "Docker tag is used already for bff. Please update bff and playground tag"
            exit 1
          else
            echo "Docker tag isn't used already for bff, continue to build..."
          fi
      - name: Check that tag isn't used already for playground
        if: steps.check_has_deployment_changed.outputs.has_deployment_changed == 'true'
        env:
          IMAGE_TAG: ${{ env.BFF_PLAYGROUND_TAG }}
        run: |
          if docker manifest inspect jinaai/now-playground:$IMAGE_TAG; then
            echo "Docker tag is used already for playground. Please update bff and playground tag"
            exit 1
          else
            echo "Docker tag isn't used already for playground, continue to build..."
          fi
      - name: Set up Docker Buildx
        if: steps.check_has_deployment_changed.outputs.has_deployment_changed == 'true'
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        if: steps.check_has_deployment_changed.outputs.has_deployment_changed == 'true'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push bff
        if: steps.check_has_deployment_changed.outputs.has_deployment_changed == 'true'
        uses: docker/build-push-action@v3
        with:
          context: deployment/bff/.
          push: true
          tags: jinaai/now-bff:${{ env.BFF_PLAYGROUND_TAG }}
      - name: Build and push playground
        if: steps.check_has_deployment_changed.outputs.has_deployment_changed == 'true'
        uses: docker/build-push-action@v3
        with:
          context: deployment/playground/.
          push: true
          tags: jinaai/now-playground:${{ env.BFF_PLAYGROUND_TAG }}

  update-elastic-executor-if-required:
    runs-on: ubuntu-latest
    needs: [commit-lint, lint-flake-8, check-black]
    steps:
      - uses: actions/checkout@v2
      - name: Check if executor has changed
        uses: dorny/paths-filter@v2
        id: check_has_executor_changed
        with:
          filters: |
            has_changed:
            - 'now/executor/abstract/auth/**'
            - 'now/executor/indexer/elastic/**'
      - name: Get executor tag
        if: steps.check_has_executor_changed.outputs.has_changed == 'true'
        run: |
          FILE='now/constants.py'
          NOW_ELASTIC_INDEXER_VERSION=$(sed -n '/NOW_ELASTIC_INDEXER_VERSION =/p' $FILE | cut -d \' -f2)
          echo "NOW_ELASTIC_INDEXER_VERSION=$NOW_ELASTIC_INDEXER_VERSION" >> $GITHUB_ENV
      - name: Set up Python 3.7
        if: steps.check_has_executor_changed.outputs.has_changed == 'true'
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Pip install jina
        if: steps.check_has_executor_changed.outputs.has_changed == 'true'
        run: pip install "jina[perf]"
      - name: Check that tag isn't used already for executor
        if: steps.check_has_executor_changed.outputs.has_changed == 'true'
        env:
          NOW_ELASTIC_INDEXER_VERSION: ${{ env.NOW_ELASTIC_INDEXER_VERSION }}
        run: |
          if jina hub pull jinahub+docker://i7asjny7/$NOW_ELASTIC_INDEXER_VERSION; then
            echo "NOW Elastic Indexer version is used already. Please update the tag"
            exit 1
          else
            echo "NOW Elastic Indexer version isn't used already, continue to build..."
          fi
      - name: hack force push
        if: steps.check_has_preprocessing_changed.outputs.has_preprocessing_changed == 'true'
        run: echo ${{ github.event.pull_request.head.sha }} > now/executor/indexer/elastic/force_push.txt
      - name: Build and push executor
        if: steps.check_has_executor_changed.outputs.has_changed == 'true'
        env:
          NOW_ELASTIC_INDEXER_VERSION: ${{ env.NOW_ELASTIC_INDEXER_VERSION }}
        run: jina hub push --no-cache  --verbose --force-update ElasticIndexer now/executor/indexer/elastic --secret ${{ secrets.NOW_ELASTIC_EXECUTOR_SECRET }} -t latest --protected-tag $NOW_ELASTIC_INDEXER_VERSION --build-env JINA_NOW_COMMIT_SHA=${{ github.event.pull_request.head.sha }}

  update-autocomplete-executor-if-required:
    runs-on: ubuntu-latest
    needs: [commit-lint, lint-flake-8, check-black]
    steps:
      - uses: actions/checkout@v2
      - name: Check if executor has changed
        uses: dorny/paths-filter@v2
        id: check_has_executor_changed
        with:
          filters: |
            has_changed:
            - 'now/executor/abstract/auth/**'
            - 'now/executor/autocomplete/**'
      - name: Get executor tag
        if: steps.check_has_executor_changed.outputs.has_changed == 'true'
        run: |
          FILE='now/constants.py'
          NOW_AUTOCOMPLETE_VERSION=$(sed -n '/NOW_AUTOCOMPLETE_VERSION =/p' $FILE | cut -d \' -f2)
          echo "NOW_AUTOCOMPLETE_VERSION=$NOW_AUTOCOMPLETE_VERSION" >> $GITHUB_ENV
      - name: Set up Python 3.7
        if: steps.check_has_executor_changed.outputs.has_changed == 'true'
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Pip install jina
        if: steps.check_has_executor_changed.outputs.has_changed == 'true'
        run: pip install "jina[perf]"
      - name: Check that tag isn't used already for executor
        if: steps.check_has_executor_changed.outputs.has_changed == 'true'
        env:
          NOW_AUTOCOMPLETE_VERSION: ${{ env.NOW_AUTOCOMPLETE_VERSION }}
        run: |
          if jina hub pull jinahub+docker://s5peqqvb/$NOW_AUTOCOMPLETE_VERSION; then
            echo "NOW Autocomplete version is used already. Please update the tag"
            exit 1
          else
            echo "NOW Autocomplete version isn't used already, continue to build..."
          fi
      - name: hack force push
        if: steps.check_has_preprocessing_changed.outputs.has_preprocessing_changed == 'true'
        run: echo ${{ github.event.pull_request.head.sha }} > now/executor/autocomplete/force_push.txt
      - name: Build and push executor
        if: steps.check_has_executor_changed.outputs.has_changed == 'true'
        env:
          NOW_AUTOCOMPLETE_VERSION: ${{ env.NOW_AUTOCOMPLETE_VERSION }}
        run: jina hub push --no-cache --verbose --force-update NOWAutoCompleteExecutor now/executor/autocomplete --secret ${{ secrets.NOW_AUTOCOMPLETE_SECRET }} -t latest --protected-tag $NOW_AUTOCOMPLETE_VERSION --build-env JINA_NOW_COMMIT_SHA=${{ github.event.pull_request.head.sha }}

  core-test:
    runs-on: ubuntu-latest
    needs: [ update-preprocessor-if-required, update-bff-playground-if-required,  update-autocomplete-executor-if-required, update-qdrant-executor-if-required, update-elastic-executor-if-required, update-ocr-executor-if-required]
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7]
        group: [1, 2, 3, 4, 5, 6, 7, 8, 9]     # set to the number of end-to-end tests + 1
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Prepare environment
        run: |
          sudo apt update && sudo apt install ffmpeg
          python -m pip install --upgrade pip
          python -m pip install wheel
          pip install --no-cache-dir ".[full,test]"
      - name: Add JCloud auth token
        run: |
          mkdir -p ~/.jina
          touch ~/.jina/config.json
          echo "{\"auth_token\": \"${WOLF_TOKEN}\"}" > ~/.jina/config.json
          cat ~/.jina/config.json
        env:
          WOLF_TOKEN: ${{ secrets.WOLF_TOKEN }}
      - name: Test
        id: test
        run: |
          pytest --suppress-no-test-exit-code --cov=now --ignore-glob=tests/executor -v -s -m "not gpu" --splits 9 --group ${{ matrix.group }} --splitting-algorithm least_duration tests/
        timeout-minutes: 25
        env:
          WOLF_TOKEN: ${{ secrets.WOLF_TOKEN }}
          S3_IMAGE_TEST_DATA_PATH: ${{ secrets.S3_IMAGE_TEST_DATA_PATH }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Setup tmate session for debugging
        if: ${{ failure() || (github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled) }}
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 60
      - name: Upload coverage
        uses: actions/upload-artifact@v2
        with:
          name: coverage${{ matrix.group }}
          path: .coverage

  executor-test:
    runs-on: ubuntu-latest
    needs: [ update-preprocessor-if-required, update-qdrant-executor-if-required, update-bff-playground-if-required, update-elastic-executor-if-required, update-ocr-executor-if-required, update-autocomplete-executor-if-required]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Prepare environment
        run: |
          sudo apt update && sudo apt install ffmpeg tesseract-ocr
          python -m pip install --upgrade pip
          python -m pip install wheel
          pip install --no-cache-dir ".[full,test]"
      - name: Test executors separately
        timeout-minutes: 10
        run: |
          pytest --suppress-no-test-exit-code --cov=now --cov-append -v -s tests/executor/auth
          pytest --suppress-no-test-exit-code --cov=now --cov-append -v -s tests/executor/indexer/base
          pytest --suppress-no-test-exit-code --cov=now --cov-append -v -s tests/executor/indexer/elastic
          pytest --suppress-no-test-exit-code --cov=now --cov-append -v -s tests/executor/preprocessor
          pytest --suppress-no-test-exit-code --cov=now --cov-append -v -s tests/executor/autocomplete
      - name: Setup tmate session for debugging
        if: ${{ failure() || (github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled) }}
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 60
      - name: Upload coverage
        uses: actions/upload-artifact@v2
        with:
          name: coverage_executor
          path: .coverage

  # just for blocking the merge until all parallel core-test are successful
  success-all-test-coverage:
    runs-on: ubuntu-latest
    needs: [core-test, executor-test]
    if: always()
    steps:
      - uses: actions/checkout@v2
      - uses: technote-space/workflow-conclusion-action@v2
      - name: Check Failure
        if: env.WORKFLOW_CONCLUSION == 'failure'
        run: exit 1
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Prepare environment
        run: |
          python -m pip install --upgrade pip
          pip install pytest-cov
      - name: Download all coverage artifacts
        uses: actions/download-artifact@v2
      - name: Run coverage
        run: |
          coverage combine coverage*/.coverage*
          coverage xml
      - name: Upload coverage from test to Codecov
        uses: codecov/codecov-action@v2
      - name: Success
        if: ${{ success() }}
        run: echo "All Done"
